#    -*- mode: org; fill-column: 120; -*-
#+TITLE: Vicente's Emacs
#+AUTHOR: Vicente Collares

** Package Repository
Normal Branch using HTTPS.
/Source: [[https://melpa.org/#/getting-started][Melpa.org - Getting started]]/ 

#+BEGIN_SRC emacs-lisp

(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
    (not (gnutls-available-p))))
    (proto (if no-ssl "http" "https")))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)

#+END_SRC

** No Backup Or Autosave
No backup or autosave (**my personal preference**).
/Source: [[https://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][stackoverflow.com - How do I control how emacs makes backup files?/
]]
#+BEGIN_SRC emacs-lisp

(setq make-backup-files nil) 
(setq auto-save-default nil)

#+END_SRC
** Line Numbering and No Final Newline
If Emacs version <= 26.0.50, then number lines.
/Source: [[https://www.emacswiki.org/emacs/LineNumbers][emacswiki.org - Line Numbers]]/

#+BEGIN_SRC emacs-lisp

(when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))

(setq require-final-newline nil)
(setq mode-require-final-newline nil)

#+END_SRC
** Company-mode Configuration
Default Configuration for company-mode from their site. I also load a few backends for company (such as company-math).
/Source: [[https://company-mode.github.io/][company-mode for Emacs]]/

#+BEGIN_SRC emacs-lisp

  (use-package company
      :ensure t
      :config
      (add-hook 'after-init-hook 'global-company-mode)
  )

  (use-package company-math
    :ensure t)
    
#+END_SRC

** My variables
My variables as set-up by Emacs, with minor modifications on my part.
/Source: Emacs & Myself/

#+BEGIN_SRC emacs-lisp

(prefer-coding-system 'utf-8) ; Always try to use utf-8

(custom-set-variables
 '(custom-enabled-themes (quote (nord)))
 '(custom-safe-themes
   (quote
     ("7f6d4aebcc44c264a64e714c3d9d1e903284305fd7e319e7cb73345a9994f5ef" default)))
 '(inhibit-startup-screen t)
 '(package-selected-packages
 (quote
    (racket-mode move-text restart-emacs company-ghci flycheck-haskell haskell-mode fill-column-indicator zeal-at-point flycheck undo-tree smartparens rainbow-delimiters nord-theme magit org-pomodoro ein go-mode dashboard doom-modeline all-the-icons org-bullets use-package elfeed pdf-tools))))

#+END_SRC  
** Hidden menu-bar
Hide menu bar & add a macro to show menu-bar and bind (F10).
/Source: [[https://stackoverflow.com/questions/11176138/dynamically-show-hide-menu-bar-in-emacs][Dynamically show/hide menu bar in Emacs]] & Myself/
    
#+BEGIN_SRC emacs-lisp

(menu-bar-mode -1) ; Hide menu-bar

(add-hook
    'pre-command-hook
    (lambda ()
    (when (eq menu-bar-mode 42)
    (menu-bar-mode -1))))

(defun Menu-bar-open ()
    (interactive)
    (unless menu-bar-mode
    (menu-bar-mode 1))
    (menu-bar-open)
    (setq menu-bar-mode 42))

(global-set-key [f10] 'Menu-bar-open) ; Bind Macro "menu-bar-open" to F10 

#+END_SRC
** Org-mode customization
*** Positions of tags
Make sure tags  aren't aligned further away from  the heading's text. This  is my personal preference, I  don't like how
Emacs does it by default.  
/Source: [[https://stackoverflow.com/questions/6210840/tag-position-in-org-mode][Tag Position in Org Mode]]/

#+begin_src emacs-lisp

(setq org-tags-column 0)

#+end_src

*** Todo keywords as workflow states
Use TODO keywords to indicate different sequential states in the process of working on an item. I use:
  - TODO for tasks to be completed (fast access letter *t* or *T*).
  - WAITING for tasks that aren't currently doable because of someone or something (fast access letter *w* or *W*).
  - DONE for tasks which are complete (fast access letter *d* or *D*).
  - MISSED for tasks which deadline has passed (fast access letter *m* or *M*).
  - CANCELED for tasks which are canceled (fast access letter *c* or *C*).
  - OBSOLETE for taks that are no longer necessary and/or possible (fast access letter *o* or *O*).
/Source: Org-mode manual section 5.2.1 and Myself/

#+begin_src emacs-lisp

(setq org-todo-keywords
    '((sequence "TODO(t/T)" "WAITING(w/W)" "|" "DONE(d/D)" "MISSED(m/M)" "CANCELED(c/C)" "OBSOLETE(o/O)")))

(setq org-todo-keyword-faces
    '(("TODO" . (:foreground "deep pink" :weight bold))
    ("WAITING" . (:foreground "deep sky blue" :weight bold))
    ("DONE" . (:foreground "lime green" :weight bold))
    ("MISSED" . (:foreground "red" :weight bold))
    ("CANCELED" . (:foreground "dark orange" :weight bold))
    ("OBSOLETE" . (:foreground "AntiqueWhite3" :weight bold))))

#+end_src

*** Locations of important files or directories
    Here are the locations of important files/directories to Org. I use setq for each one.
    #+begin_src emacs-lisp
    
    (setq org-agenda-files (list "~/Documents/Org/Todo.org")) ; I only have one agenda file
    (setq org-directory "~/Documents/Org")
    ;(setq org-default-notes-file (concat org-directory "/Todo.org"))

    #+end_src
*** Org-mode bullets
    Load [[https://github.com/emacsorphanage/org-bullets/]["org-bullets mode"]], which was installed using [[https://melpa.org/][MELPA]].
    /Source: [[https://github.com/emacsorphanage/org-bullets/blob/master/README.md]["org-bullets mode" - README.md]]/
    
    #+BEGIN_SRC emacs-lisp

    (use-package org-bullets
        :ensure t
	:config
	(add-hook 'org-mode-hook 'org-bullets-mode)
    )

    #+END_SRC
*** Setting tags
     Here I set  up my tags for my org-mode  TODO entries. The one that  start by the [at] symbol are  locations such as
     [at]Home, [at]Education, [at]Work  and [at]social, @Outside. I also  define general and commonly used  tags such as
     Computer, Programming, Music and etc.   More specific tags are going to be defined in at  the beginning of the TODO
     file in question using "#+TAGS:".
     /Source: Org manual & Myself/

     #+begin_src emacs-lisp

     (setq org-tag-alist '(("@Home" . ?H) ("@Education" . ?E) ("@Work" . ?W) ("@Social" . ?S) ("@Outside" . ?O) ("URGENT" . ?U) ("CALL" . ?C) ; HEWSOUC
                           ("Family" . ?f) ("Computer" . ?c) ("Programming" . ?p) ("Music" . ?m) ("Internet" . ?x) ("Mathematics" . ?a) ("Sailing" . ?z) ; fcpmxaz
			   ("Nature" . ?N)("Science" . ?s) ("Technology" . ?k) ("Reading" . ?o) ("Data" . ?d) ("Games" . ?g) ("Entertainment" . ?n) ("Friends" . ?r) ("Email" . ?i) ; Nskodgnri
			   ("Linux" . ?l) ("Emacs" . ?e) ("TeX" . ?t) ("SuperCollider" . ?u) ("Matlab" . ?y) ("Windows" . ?w) ("\n"))) ; letuw

     #+end_src
*** Setting up capture
     Here I set  up capture for org mode  using the keybinding C-cc (the same  keybinding as in the org  manual). I also
     create a TODO template called Task.
     /Source: Org manual & Myself/
     
     #+begin_src emacs-lisp

     (global-set-key (kbd "C-c c") 'org-capture)

     (setq org-capture-templates
         '(("t" "Task" entry (file+headline "~/Documents/Org/Todo.org" "Active Tasks")
	      "** TODO %?\n⠀ ⠀SCHEDULED: %^t\n⠀ ⠀%i"))) ; Here I use three different unicode white space characters

     (setq-default org-capture-bookmark nil)

     #+end_src
*** Org-Pomodoro
     This adds basic support for Pomodoro technique inside of Emacs' org-mode.
     /Source: [[https://github.com/marcinkoziej/org-pomodoro][Org-Pomodoro (Github)]] & Myself/
     
     #+begin_src emacs-lisp
     (use-package org-pomodoro
         :ensure t
     )
     #+end_src     
*** Org agenda global keybinding
     I set "C-c a" to open Org agenda from anywhere inside Emacs.
     /Source: Myself/

     #+begin_src emacs-lisp

     (global-set-key (kbd "C-c a") 'org-agenda)

     #+end_src

** Open Urls With The default web browser
Here I tell Emacs to use the default browser (for MS Windows).
/Source: [[https://stackoverflow.com/questions/4506249][How to make emacs org-mode open links to sites in Google Chrome]] & Myself/

#+BEGIN_SRC emacs-lisp

(setq browse-url-browser-function 'browse-url-default-windows-browser)

#+END_SRC

** Hide toolbar & scrollbar when using emacs from GUI
Hide GUI emacs toolbar & scrollbar, the settings are conditional since problems can arise if using emacs from tty. 
/Source: [[http://kb.mit.edu/confluence/display/istcontrib/Disabling+the+Emacs+menubar%252C+toolbar%252C+or+scrollbar][Disabling the Emacs menubar/toolbar or scrollbar]] & Myself/
    
#+BEGIN_SRC emacs-lisp

(when (display-graphic-p)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1))

#+END_SRC
** Change font to "Consolas" when using emacs from GUI
Change emacs font to "Consolas" and set font size to 10pt. This is only run when using emacs from GUI because 
of personal preference, when in the tty I want to use the terminal emulator's default font.
/Source [[https://www.emacswiki.org/emacs/SetFonts][SetFonts (emacswiki)]] & Myself/ 

#+BEGIN_SRC emacs-lisp

(when (display-graphic-p)
    (set-face-attribute 'default nil :family "Consolas" :height 105))

#+END_SRC
** Always open emacs GUI maximized
Always open emacs GUI as a maximized (fullscreen) window.
/Source: [[https://emacs.stackexchange.com/questions/2999/][How to maximize my Emacs frame on start-up?]]/

#+BEGIN_SRC emacs-lisp

(add-to-list 'default-frame-alist '(fullscreen . maximized))

#+END_SRC
** Rss/ATOM reader (elfeed)
This is my configuration for Elfeed (an Rss/Atom Reader) with a few keybindings and using "use-package". 

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-c w") 'elfeed) ; Bind C-x w to elfeed

(use-package elfeed
    :ensure t
    :bind (
    
    :map elfeed-search-mode-map
    ("C-c a" . elfeed-update) ; Set "C-c a" to update db
    ("C-c c" . elfeed-db-compact) ; Set "C-c c" to compress db
    ("C-c r" . elfeed-search-set-feed-title) ; Set "C-c r" to rename a feed

    )
    :config
    ; Populating the Elfeed database with my feeds and tagging them
    (setq elfeed-feeds
    '(("https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" video LukeSmith)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCDYZxJE8kLZ-o6nL8E1bXdQ" video Matn)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCsnGwSIHyoYN0kiINAGUKxg" video Wolfgang)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCZrrEuHiQjN2CUo84g5tk7w" video Tripcode)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCFhXFikryT4aFcLkLw2LBLA" video NileRed)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg" video DT)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCerEIdrEW-IqwvlH8lTQUJQ" video Ak)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCxzC4EngIsMrPmbm6Nxvb-A" video Manley)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCMLgHbpJ8qYqj3CkdbvC0Ww" video Fran)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UC5I2hjZYiW9gZPVkvzM8_Cw" video Techmoan)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCLx053rWZxCiYWsBETgdKrQ" video LGR)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCRXnOs1rjfLMYrtZ-0n29NA" video FreedomToons)
    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCAPR27YUyxmgwm3Wc2WSHLw" video Chris)
    ("https://news.ycombinator.com/rss" news Hacker)
    ("https://www.phoronix.com/rss.php" news Phoronix)
    ("https://www.reddit.com/r/linux.rss" reddit Linux)
    ("https://www.reddit.com/r/linuxmasterrace.rss" reddit MasterRace)
    ("https://www.reddit.com/r/privacy.rss" reddit Privacy)
    ("https://xkcd.com/rss.xml" webcomic XKCD)))
    
    ; Renaming feeds to better names
    (defadvice elfeed-search-update (before nullprogram activate)
    (let ((feed (elfeed-db-get-feed "https://www.reddit.com/r/linux.rss")))
    (setf (elfeed-feed-title feed) "r/Linux"))
    
    (let ((feed (elfeed-db-get-feed "https://www.reddit.com/r/linuxmasterrace.rss")))
    (setf (elfeed-feed-title feed) "r/LinuxMasterRace"))      
    
    (let ((feed (elfeed-db-get-feed "https://www.reddit.com/r/privacy.rss")))
    (setf (elfeed-feed-title feed) "r/Privacy")))

    (setf url-queue-timeout 30) ; Set fetch timeout
    (setq elfeed-db-directory "~/.emacs.d/elfeed") ; Set database location
    (setq-default elfeed-search-filter "@2-days-ago +unread") ; Set default search filter
    
    ; Change time format (day month year)
    (defun elfeed-search-format-date (date)
    (format-time-string "%d %b %Y" (seconds-to-time date)))
)

#+END_SRC
** Disable annoying alarm bell
Disable the extemely annoying alarm bell in case it isn't already done on the system, this doesn't replace the bell by a
visual one (flashing).
/Source: [[https://emacs.stackexchange.com/questions/28906/][how to switch off the sounds]]/

#+BEGIN_SRC emacs-lisp

(setq ring-bell-function 'ignore)

#+END_SRC

** Eww (an Emacs-based web browser)
Eww is  a emacs-based  web browser  that can  display images  (in GUI emacs  only), here  I've configured  it and  set a
keybinding to access it ("C-c b").
/Source: Myself/

#+BEGIN_SRC emacs-lisp 

(global-set-key (kbd "C-c b") 'eww)

(use-package eww
    :ensure t
    :config
    (setq eww-download-directory "~/Downloads") ; Set download directory
)

#+END_SRC
** Pdf-tools (a replacement for Docview)
Pdf-tools is a replacement for Docview (which I don't like), here I configure it using use-package.  Note: I've disabled
this for  now since it doesn't  work inside of  wsl and I don't  need yet another  pdf reader. - Vicente  (2020-01-19 at
13:35)
/Source: [[https://github.com/politza/pdf-tools/blob/master/README.org][pdf-tools (Github)]] & Myself/

#+BEGIN_SRC emacs-lisp

(use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
)

#+END_SRC
** Confirm before exiting Emacs
I've accidentally exited  emacs many times, so I've  set the variable "confirm-kill-emacs" to "'y-or-n-p"  so that emacs
always confirms before exiting.
/Source: [[https://stackoverflow.com/questions/21192111][Prevent Emacs from exiting once the exit procedure has initiated?]]/

#+BEGIN_SRC emacs-lisp

(setq confirm-kill-emacs 'y-or-n-p)

#+END_SRC
** Add Icons to emacs (all-the-icons)
All-the-icons is used by emacs-dashboard & others to display icons. 
/Source: Myself/
    
#+BEGIN_SRC emacs-lisp

(use-package all-the-icons
    :ensure t
)

#+END_SRC

** A custom dashboard
Use the package emacs-dashboard to have my own customized dashboard which starts with emacs. Show recently edited files, 
bookmarks, org agenda & registers. 
/Source [[https://github.com/emacs-dashboard/emacs-dashboard/blob/master/README.org][Emacs-dashboard (Github)]], [[https://github.com/daedreth/UncleDavesEmacs][Uncle Dave's Emacs]] & Myself/

#+BEGIN_SRC emacs-lisp

(use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    
    ; Add icons to the widget headings and their items
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)

    ; Set the banner logo text [1], the emacs icon style [2] and center everything [3] 
    (setq dashboard-banner-logo-title "Welcome to Emacs Vicente")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    
    ; Set no footer message & set '\n\n' as separators
    (setq dashboard-set-footer nil)
    (setq dashboard-page-separator "\n\n")

    ; The widgets I use: bookmarks, org agenda and registers (syntax: "[Widget Name] . [N.B of items]")
    (setq dashboard-items '((recents  . 5)
    (bookmarks . 5)
    (agenda . 5)
    (registers . 5)))
)
    
#+END_SRC

** Close current buffer
Close the current buffer using "kill-buffer-and-window" by pressing "C-x k" globally. 
/Source: Myself/

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-x k") 'kill-buffer-and-window) 
    
#+END_SRC

** Custom modeline (using doom-modeline)
I setup a custom modeline using the doom-modeline theme and customize it. 
/Source: [[https://github.com/seagle0128/doom-modeline][Doom-modeline (github)]] & Myself/

#+BEGIN_SRC emacs-lisp

(use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config

    ; Display icons in mode-line or not
    (setq doom-modeline-icon t)

    ; Display indentation information
    (setq doom-modeline-indent-info t)
   
    ; Don t compact font caches during GC
    (setq inhibit-compacting-font-caches t)
)

#+END_SRC
** Disable 'suspend-frame keybindings (Ctrl-z & Ctrl-x Ctrl-z)
Ignore 'suspend-frame keybindings since I find them annoying & useless and sometimes fat-finger them.
/Source: [[https://stackoverflow.com/questions/7243155/cant-seem-to-get-rid-of-ctrl-x-ctrl-z-key-binding-in-emacs-for-minimizing-windo][Can't seem to get rid of Ctrl-x Ctrl-z Key Binding in Emacs for minimizing window]] & Myself/

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-x C-z") nil) ; Ctrl-x Ctrl-z
(global-set-key (kbd "C-z") nil) ; Ctrl-z

#+END_SRC

** Scientific Calculator Settings (M-x calc)
My  preferences for  Emacs' scientific  calculator (M-x  calc): scientific  notation for  float numbers  and display  as
fraction when possible.
/Source: Myself & Emacs autogen/

#+BEGIN_SRC emacs-lisp

(use-package calc
    :ensure t
    :config
    
    (setq calc-full-float-format '(sci 0))
    (setq calc-float-format '(sci 0))
)

#+END_SRC
** Use the forward and backward buttons on my mouse to cycle between buffers
My "mouse",  which is actually a  trackball (Logitech M570),  has a forward and  backwards button which serves  to cycle
between buffers  in Emacs.  Note: According  to my testing  the forward & backward  mouse buttons don't work  inside the
command line, therefore I only set these keys on GUI mode.  
/Source: Myself & Elisp manual/

#+BEGIN_SRC emacs-lisp

(when (display-graphic-p)
    (global-set-key [mouse-4] 'previous-buffer)
    (global-set-key [mouse-5] 'next-buffer))

#+END_SRC
** Ledger-mode (Bookkeeping)
Ledger is a command-line based double-entry bookkeeping application, and this is helper code to use Ledger with Emacs.
/Source: [[https://github.com/ledger/ledger-mode/tree/47a186ecc3f7e270c2eb93cbe659e5fa07caeff6][Ledger-mode (Github)]] & myself/

#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
    :ensure t
    :bind (

       :map ledger-mode-map
       ("C-c c" . ledger-mode-clean-buffer)
       ("C-c s" . ledger-sort-buffer)

    )
    :mode "\\.dat\\'"
    :config
    (setq ledger-clear-whole-transactions 1)
)
#+END_SRC
** Slime (Superior Lisp Interaction Mode)
This package extends Emacs with support for interactive programming in Common Lisp. 
/Source:[[https://github.com/slime/slime][Slime (Github)]] and myself/

#+BEGIN_SRC emacs-lisp
  ; Works on Windows for me
    (use-package slime
      :ensure t
      :config
      (setq slime-lisp-implementations
	    '((sbcl ("C:\\Program Files\\Steel Bank Common Lisp\\2.0.0\\sbcl.exe" "--core" "C:\\Program Files\\Steel Bank Common Lisp\\2.0.0\\sbcl.core"))))
    )
#+END_SRC
** YASnippet
YASnippet is a template system for Emacs.
/Source: [[https://github.com/joaotavora/yasnippet][YASnippet (Github)]] and myself/

#+BEGIN_SRC emacs-lisp
; Can't get this to work, please fix later
  (global-set-key (kbd "C-c s") 'yas-insert-snippet)
  
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1)
  )
  
  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet    
  )
#+END_SRC
** which-key
which-key is a minor mode  for Emacs that displays the key bindings following  your currently entered incomplete command
(a prefix) in a popup.
/Source: [[https://github.com/justbur/emacs-which-key][Which-key (GitHub)]] & Myself/

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    )
#+END_SRC
** Ess (Emacs Speaks Statistics)
Here I tell Emacs that it requires Ess (a.k.a Emacs Speaks Statistics).
/Source: Myself/

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t)
#+END_SRC
** AUCTeX and Other Typesetting things
This tells Emacs to require AUCTeX. AUCTeX is an extensible package for writing and formatting TeX files in Emacs.
/Source: [[https://en.wikipedia.org/wiki/AUCTeX][Wikipedia]] & Myself/

#+begin_src emacs-lisp
  (use-package auctex
  :defer t  
  :ensure t)
#+end_src

I also tell Emacs to require Markdown mode.
/Source: Myself/

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+end_src

I tell Emacs to require htmlize. This package is used when generating html pages from .org files.

#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src
** Go-mode
Go-mode is a major mode for the Go programming language.
/Source: Myself/

#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t)
#+end_src
** Emacs IPython Notebook (EIN)
This lets us run Jupyter (formerly IPython) notebooks within Emacs.
/Source: [[https://github.com/millejoh/emacs-ipython-notebook][Ein (GitHub)]] & Myself/

#+begin_src emacs-lisp
(use-package ein
    :ensure t)
#+end_src
** Magit (Git porcelain)
Magit is an interface to Git implemented as an Emacs package. It aspires to be a complete Git porcelain.
/Source: [[https://github.com/magit/magit][Magit (GitHub)]] & myself/

#+begin_src emacs-lisp

(use-package magit
    :ensure t
    :bind* (
    ("C-x g" . magit-status)
    )
)

#+end_src 
** Nord theme
This uses use-package to install the nord theme.
/Source: Myself/

#+begin_src emacs-lisp

(use-package nord-theme
    :ensure t)

#+end_src
** Rainbow delimiters
This mode highlights delimiters such as parentheses, brackets or  braces according to their depth. Each depth has it own
color.  To start the mode automatically in programming modes I use 'prog-mode-hook.
/Source: [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters (GitHub)]] & Myself/

#+begin_src emacs-lisp

(use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

)
#+end_src
** Automatic insertion of pairs
Smartparens is for the automatic insertion, wrapping navigation with user defined pairs.
/Source: [[https://github.com/Fuco1/smartparens][Smartparens (GitHub)]] & Myself/

#+begin_src emacs-lisp

(use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (add-hook 'prog-mode-hook #'smartparens-mode)
    (add-hook 'haskell-interactive-mode-hook #'smartparens-mode)
)

#+end_src
** Better undoing and redoing using Undo-tree
Here I setup Undo-tree to have better undoing, redoing and visualizing changes.
/Source: [[https://www.youtube.com/watch?v=zL0FJ-jbDPU][undo-tree (YouTube)]] & Myself/

#+begin_src emacs-lisp

(use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode)
    :bind* (
    ("C--" . undo-tree-undo)
    ("C-=" . undo-tree-redo)
    )
)

#+end_src
** On the fly syntax checking
Flycheck provides modern on-the-fly syntax checking extension for multiple languages for Emacs.
/Source: [[https://github.com/flycheck/flycheck][flycheck (GitHub)]] & Myself/

#+begin_src emacs-lisp

(use-package flycheck
    :ensure t
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
)

#+end_src
** Search word at point with Zeal
Zeal is a simple offline API documentation browser. Zeal-at-point let's you search a word with Zeal.
/Source: [[https://github.com/jinzhu/zeal-at-point][zeal-at-point (GitHub)]] & Myself/

#+begin_src emacs-lisp

(use-package zeal-at-point
    :ensure t
    :bind* (
    ("C-c d" . zeal-at-point))
)

#+end_src
** Fill-column value and indicator
I set fill-column at 80 and add a minor mode  that graphically indicates the fill column's lenght.  I will activated in
all programming modes, it can be activated manually for other  modes using M-x fci-mode. I set C-c f to quickly activate
or desactivate the indicator.
/Source: [[https://www.emacswiki.org/emacs/FillColumnIndicator][Fill Column Indicator (EmacsWiki)]] & Myself/

#+begin_src emacs-lisp

(setq-default fill-column 80)

(use-package fill-column-indicator
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'fci-mode)
    :bind* (
    ("C-c f" . fci-mode)
    )
    :config
    (setq fci-rule-color "#4C566A")
    (setq fci-rule-width 2)
)

#+end_src
** Haskell support
Haskell-mode is  a mode for  editing, developing and  debugging Haskell programs in  Emacs. I also  add flycheck-haskell
which provides support for on the fly syntax checking (using  Cabal).
/Source: [[https://github.com/haskell/haskell-mode][haskell-mode (GitHub)]] & Myself/

#+begin_src emacs-lisp

  (use-package haskell-mode
      :ensure t)

  (use-package flycheck-haskell
      :ensure t
      :init
      (add-hook 'haskell-mode-hook #'flycheck-haskell-setup)
  )

  (use-package company-ghci
      :ensure t
      :config
      (push 'company-ghci company-backends)
      (add-hook 'haskell-mode-hook 'company-mode)
      (add-hook 'haskell-interactive-mode-hook 'company-mode) ;;; Completions in REPL
  )

#+end_src
** Restart Emacs from within itself
Restart Emacs from within Emacs itself using the keybinding "C-x c" (which kinda resembles to "C-x C-c").
/Source: [[https://github.com/iqbalansari/restart-emacs][Restart-Emacs (GitHub)]] & Myself/

#+begin_src emacs-lisp
  (use-package restart-emacs
      :ensure t
      :bind* (
      ("C-x c" . #'restart-emacs)
      )
  )
#+end_src
** Move the current line
Move-text allows you to move the current line/region using "M-up" and "M-down" outside Org-mode.
/Source: [[https://github.com/emacsfodder/move-text][move-text (GitHub)]] & Myself/

#+begin_src emacs-lisp
  (use-package move-text
      :ensure t
      :config
      (move-text-default-bindings)
  )
#+end_src 
** Racket Lisp
Racket-mode adds support for racket code editing, REPL, auto-completion and more. Racket is a Lisp based on scheme.
/Source: [[https://www.racket-mode.com/][Racket-mode.com]] & Myself/

#+begin_src emacs-lisp
  (use-package racket-mode
      :ensure t
      :config
      (setq racket-program "c:/Program Files/Racket/Racket.exe"))
#+end_src
** Recentf: ignore bookmarks and agenda
Here I tell Emacs to not include the bookmarks or the agenda file to the recently opened files.
/Source: [[https://emacs.stackexchange.com/questions/27139/ignoring-specific-files-in-recentf-mode][Ignoring specific files in recentf mode (emacs.stackexchange.com)]]/

#+begin_src emacs-lisp

(add-to-list 'recentf-exclude
             (expand-file-name "~/.emacs.d/bookmarks"))

(add-to-list 'recentf-exclude
             (expand-file-name "~/Documents/Org/Todo.org"))

(add-to-list 'recentf-exclude
             (expand-file-name "~/quicklisp/*"))

#+end_src